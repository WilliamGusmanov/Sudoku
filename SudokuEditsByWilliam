	import java.util.*;
	import java.util.Random;

	// Version 2018-10-14 - Sunday

	public class SudokuPuzzle {
		Scanner in = new Scanner(System.in);
		private int board[][]; 
		private boolean start[][]; 
		
		private int userRow;
		private int userCol;
		private int userValue;

		// 2-Dimensional Map:   Key: String, Value: Set<Integer> 
		// The key is a String which concatenates the row and column:
		// i.e. A key of 1 means row 0, col 1.  A key of 74 is row 7, col 4.
		// The value mapped to the key is a set of Integers that can be played: {1,2,3,4,5,6,7,8,9}
		// Sets have the faster get methods to test for membership compared to an Array
		// This initial map will be populated in the Constructor

		public Map <Integer, Set<Integer>> allowed_values = new HashMap<Integer, Set <Integer>>();

		// This is a set of numbers from 0 to 88  (excluding 9, 19, 29, 39, 49...)
		// This will be populated in the constructor
		private Set<Integer> vacancies;
	 
	 	//CONSTRUCTOR:
		public SudokuPuzzle() {
			/* 

			Constructs Four groups of things. This operator allows us to create multiple instances of puzzles.
			
			1) this.board  -- Actual State of the 9x9 board. Empty values are 0  

			2) this.start  --  9 x 9 - Default numbers placed at the beginning of the game that cannot be changed
							-- True if it is default & cannot be changed  , False if it was originally blank

			3) this.allowed_values -- A mapping of all the possible (allowed) numbers that can be played in a given row/col coordinate
							-- We initialize every row/col coordinate with the set {1,2,3,4,5,6,7,8,9}
							-- This initialization is done in the private method  populateSet()		
			*/

			this.board = new int[9][9]; // 1) 
			this.start = new boolean[9][9]; // 2)  

			
			for (int i = 0; i < 9; i ++){ // Each row
				
				for (int j = 0; j < 9 ; j++) // Each column
				{

					Set<Integer> set = new HashSet<Integer>();
					populateSet(set, 10, false); // Populate set from 0 (inclusive) until 10-1
					this.allowed_values.put( (i*10) + j , set ); // Builds the key that connects to its integer set
				}
			} //at this point, all numbers 1 - 9 are possible values for every row, col (every key). 

			// 4)
			this.vacancies = new HashSet<Integer>();
			populateSet(this.vacancies,89, true); 
		} //at this point, this.vacancies is filled to 1 -> 88, no remainder 9 values included. 


		//@Not to be used outside of constructor
		private void populateSet(Set<Integer> set, int end, boolean removeNines){
			// Populate set with {1,2,3,4,5,6,7,8 ... end-1 } 
			if (removeNines == true){
				for (int num = 1; num < end; num++ ){ 
						if (num%10 != 9) { // don't add 9, 19, 29, 39, 49 ... etc
							set.add(num); 
						}
				}
			} else {// removeNines == false 
				for (int num = 1; num < end; num++ ){ //1 -> 9 Sudoku values, always false for allowed values.  
							set.add(num); 
				}
			}
		}

		//@Not to be used outside. Just for picking a random number from the set
		private int produceValue(Set<Integer> set){
			// Pass in a set as a parameter.
			// this function will randomly pick one of the numbers in the set to spit out
			int size = set.size(); // Get the size of the set 
			int value = new Random().nextInt(size); // Get a number from 0 to the size of set
			int i = 0; // Start counting as you iterate through the set, until we spit oone
			for (int number : set) //this is genius. picks a random value and iterates through i. Gives back equivalent location within set 
			{	
				if (i == value)
					return number; //returns the randomized coordinate not including 9's. 
				i++;
			}
			return -1; // to make compiler shut up "Must have a return because it can't see inside the for loop"

		} 

		public void addInitial(){
			// Initializes the board with 10 random legal positions! 
			
			for (int pos = 0; pos < 10; pos++){
				// Generate coordinate
				int vacant_coordinate = produceValue(this.vacancies); //example 64 / 10 = 6 (row), 64 % 10 = 4 (col)
				int random_row = vacant_coordinate/10; //genius -> gives row 6
				int random_col = vacant_coordinate%10; //genius -> gives col 4
				this.vacancies.remove(vacant_coordinate); //removes coordinate from set of vacant coordinates

				//puts all allowed values of vacant coordinate into numbers_set 
				Set<Integer> numbers_set = this.allowed_values.get(vacant_coordinate); //creates a set of numbers for the coordinate
				int value = produceValue(numbers_set); // Randomly pick one of the numbers from the allowed numbers 
				//value is the randomized value from 1 - 9 for the vacant coordinate. 
				
				// Update the board & start
				this.board[random_row][random_col] = value; //sets the random 1 - 9 value to the random coordinate
				this.start[random_row][random_col] = true; //becomes default value 

				UpdateBoard(random_row,random_col,value); //Update Board is now a method 

				/*
				// Remove this value from every member in the entire box
				
				// Box 1		Box 2		...
				// 0 [00 01 02 ]	[03 04 05]
				// 1 [10 11 12 ]	[13 14 15]
				// 2 [20 21 22 ]  [23 24 25]
				// Box 4
				// 3 [30 31 32]
				// 4 [40 41 42]
				// 5 [50 51 52]
				*/
			}
		}
		
		public void display(){
			// Displays board 

			// This part displays the x-coordinate (the numbering for each column)
			System.out.print("  ");
			for (int x = 0; x < 9; x ++){
				String dividerx = (x%3 == 2) ? ("   ") : (" ");	
				System.out.print(" " + x + " " + dividerx); // Label the columns
			}
			System.out.println(); // new line

			// This part just displays the actual sudoku boards
			for (int i = 0; i < 9; i ++ ){
				
				System.out.print(i + " "); // Labeling the rows 
				
				for (int j = 0; j < 9; j++){

					String divider = (j%3 == 2) ? ("   ") : (" ");	// Divides by boxes 
					if (board[i][j] == 0)  {
						System.out.print("[ ]" + divider); //prints null
					} else {
						System.out.print("[" + board[i][j] +"]" + divider); // Print the actual Value
					}			
				}
				// Produce new line, divide the boxes up
				String vertical_divider = (i%3 == 2) ? "\n" : "";
				System.out.println(vertical_divider);
			}
		}
		
		public void UserInput() {
			
			while (this.vacancies.size() > 0) {
		System.out.println("Enter row, col and the value you wish to enter: ");
		System.out.print("row: ");
		userRow = in.nextInt();
		System.out.print("col: ");
		userCol = in.nextInt();
		if (this.start[userRow][userCol] == true) {
			System.out.println("This is a default value, please try again.");
			UserInput(); //recursive method to reenter UserInput
		}
		System.out.print("value: ");
		userValue = in.nextInt();
		checkPuzzle(userRow,userCol,userValue);
		System.out.println("The size of vacancies is : " + this.vacancies.size()); //you can remove this later
		display();  
		}
			if (this.vacancies.size() == 0) {
				System.out.println("You Win!");
			}
		}
	
		//if we add a value to key, then if its a duplicate, it should return false.
		public void checkPuzzle(int row, int col, int value) {
			
			int key = row*10 + col;   
			
			//checks if coordinate is a default value
			boolean CheckDefault = this.start[row][col];
			
			//checks if the coordinate has an allowed value	 
			//is true if it not part of allowed values (should not be allowed)
			if (CheckDefault == false && this.allowed_values.get(key).add(value) == false) {//false means the value is part of allowed values 
				
				this.board[row][col] = value;
				this.start[row][col] = false; //not a default value
				UpdateBoard(row, col, value); //will remove values from boxes, rows, and columns of allowed value keys
				this.vacancies.remove(key); //removes key which reduces size. 
			}
			else if (CheckDefault == false && this.allowed_values.get(key).add(value) == true) { //this is when spot is taken but value is not default 
				int OldValue = this.board[row][col]; //takes old value and enters back into allowed values
				ReversalUpdateBoard(row,col,OldValue);
				this.vacancies.add(key); 
			}
			else {
				System.out.println("the value is not allowed, reenter number");
				UserInput();
			}
		}
		
		//this method updates allowed values for rows, columns and boxes
		public void UpdateBoard(int row, int col, int value) {

			for (int j = 0; j < 9; j++) {  //example if row is 7 -> key is 70. then removes values from keys 70-78
				int key = row*10 + j; //gets the key 
				this.allowed_values.get(key).remove(value);
			}

			// Update the allowed_values by column. i is the row. col stays constant
			for (int i = 0; i <9; i++) { //same idea, example if random col is 4, 
				int key = i*10 + col; //10 + 4, 20+ 4, 30+4, 40+4, 50+4, iterates through just the rows at one column
				this.allowed_values.get(key).remove(value);
			}
			
			int box_row = (row/3)*3;
			int box_col = (col/3)*3;
			for (int i = box_row ; i < box_row + 3 ; i++ ){
				for (int j = box_col ; j < box_col + 3 ; j++){

					int key = i*10 + j;
					this.allowed_values.get(key).remove(value);
				}

			} 

		}
		//this puts value back in for allowed values if user changes value.
		public void ReversalUpdateBoard(int row, int col, int value) {
			
			for (int j = 0; j < 9; j++) {  //example if row is 7 -> key is 70. then removes values from keys 70-78
				int key = row*10 + j; //gets the key 
				this.allowed_values.get(key).add(value);
			}

			// Update the allowed_values by column. i is the row. col stays constant
			for (int i = 0; i <9; i++) { //same idea, example if random col is 4, 
				int key = i*10 + col; //10 + 4, 20+ 4, 30+4, 40+4, 50+4, iterates through just the rows at one column
				this.allowed_values.get(key).add(value);
			}
			
			int box_row = (row/3)*3;
			int box_col = (col/3)*3;
			for (int i = box_row ; i < box_row + 3 ; i++ ) {
				for (int j = box_col ; j < box_col + 3 ; j++) {

					int key = i*10 + j;
					this.allowed_values.get(key).add(value);
				}

			} 

		}
		
		public static void main(String[] args){
			SudokuPuzzle puzz = new SudokuPuzzle();
			// System.out.println(puzz.allowed_values.get(1));
			//Set<Integer> numbers = new HashSet<Integer>();
			//System.out.println(puzz.produceValue(this.vacancies));	
			puzz.addInitial();
			puzz.display();
			puzz.UserInput();
		}
		
	
	}
	


